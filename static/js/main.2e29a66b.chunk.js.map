{"version":3,"sources":["Footer/Footer.js","Main/Item/Item.js","Main/Main.js","Header/Header.js","Slider.js","MyApp.js","serviceWorker.js","index.js"],"names":["Footer","className","Item","handleDelete","bind","crossOut","state","visible","event","preventDefault","axios","delete","this","props","item","_id","setState","fun","console","log","el","name","onClick","React","Component","Main","array","activity","handleChange","handleSubmit","update","post","get","then","res","activities","data","JSON","stringify","target","value","addToDataArray","done","key","length","render","x","cmps","map","mapping","onSubmit","type","onChange","placeholder","autoFocus","Header","Slider","MyApp","Boolean","window","location","hostname","match","ReactDom","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kPAUeA,MARf,WACE,OACE,4BAAQC,UAAU,UAChB,oD,+DC0CSC,E,kDA7Bb,aAAc,IAAD,8BACX,gBACKC,aAAa,EAAKA,aAAaC,KAAlB,gBAClB,EAAKC,SAAS,EAAKA,SAASD,KAAd,gBACd,EAAKE,MAAM,CAACC,QAAQ,EAAEF,SAAS,GAJpB,E,yDAMAG,GACXA,EAAMC,iBACNC,IAAMC,OAAO,+CAA+CC,KAAKC,MAAMC,KAAKC,KAC5EH,KAAKI,SAAS,CAACT,QAAQ,IACvBK,KAAKC,MAAMI,Q,+BAEJT,GACPA,EAAMC,iBACNS,QAAQC,IAAI,OACZP,KAAKI,SAAS,CAACX,SAAS,M,+BAGxB,OACwB,IAAtBO,KAAKN,MAAMC,QAAa,KACvB,yBAAKN,UAAS,eAA8B,GAApBW,KAAKN,MAAMC,QAAW,UAAU,KACvD,0BAAMN,UAAS,cAA+B,IAAtBW,KAAKN,MAAMD,SAAa,WAAW,KAAOO,KAAKC,MAAMC,KAAKM,GAAGC,MACrF,4BAAQC,QAASV,KAAKT,aAAcF,UAAU,UAAS,uBAAGA,UAAU,kBAAb,WACvD,4BAAQqB,QAASV,KAAKP,SAAUJ,UAAU,SAAQ,uBAAGA,UAAU,kBAAb,e,GAxBvCsB,IAAMC,WCwDVC,E,kDAjEX,aAAc,IAAD,8BACX,gBACKnB,MAAM,CACToB,MAAM,GACNC,SAAS,IAEX,EAAKC,aAAa,EAAKA,aAAaxB,KAAlB,gBAClB,EAAKyB,aAAa,EAAKA,aAAazB,KAAlB,gBAClB,EAAK0B,OAAO,EAAKA,OAAO1B,KAAZ,gBARD,E,2DAUEgB,GACbV,IAAMqB,KAAK,8CAA+C,CAACX,S,+BAEpD,IAAD,OACNV,IAAMsB,IAAI,+CACPC,MAAK,SAAAC,GACN,IAAMC,EAAWD,EAAIE,KAClBC,KAAKC,UAAU,EAAKhC,MAAMoB,QAAQW,KAAKC,UAAUH,GAAY,EAAKL,SAChE,EAAKd,SAAS,CAACU,MAAMS,EAAWR,SAAS,U,0CAG9B,IAAD,OACjBjB,IAAMsB,IAAI,+CACPC,MAAK,SAAAC,GACJ,IAAMC,EAAWD,EAAIE,KACrB,EAAKpB,SAAS,CAACU,MAAMS,S,mCAGd3B,GACXI,KAAKI,SAAS,CAACW,SAASnB,EAAM+B,OAAOC,U,mCAE1BhC,GACXA,EAAMC,iBACNG,KAAK6B,eACH,CACIpB,KAAKT,KAAKN,MAAMqB,SAChBe,MAAK,EACLC,IAAI/B,KAAKN,MAAMoB,MAAMkB,OAAO,IAMlChC,KAAKkB,SACLlB,KAAKiC,W,8BAECC,GACN,OAAO,kBAAC,EAAD,CAAMH,IAAKG,EAAE/B,IAAKD,KAAMgC,EAAG7B,IAAKL,KAAKkB,W,+BAErC,IAAD,OACFiB,EAAKnC,KAAKN,MAAMoB,MAAMsB,KAAI,SAAAF,GAAC,OAAE,EAAKG,QAAQH,MAC9C,OACE,6BACE,yBAAK7C,UAAU,cACb,0BAAMiD,SAAUtC,KAAKiB,cACnB,2BAAOW,MAAO5B,KAAKN,MAAMqB,SAAU1B,UAAU,SAASkD,KAAK,OAAOC,SAAUxC,KAAKgB,aAAcyB,YAAY,0BAA0BC,WAAS,IAC5I,2BAAOH,KAAK,SAASX,MAAM,SAASvC,UAAU,aAGrD8C,O,GA5DUxB,IAAMC,W,MCIV+B,MATf,WACE,OACE,gCACE,sCACA,0BAAMtD,UAAU,SAAhB,SACA,0BAAMA,UAAU,SAAhB,cCWSuD,E,uKAdX,OACE,6BACE,yBAAKvD,UAAU,UACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,QAAO,gDACtB,yBAAKA,UAAU,QAAO,6CACtB,yBAAKA,UAAU,QAAO,iDAG1B,yBAAKA,UAAU,kB,GAXFsB,IAAMC,WCaZiC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAASlB,OACP,kBAAC,EAAD,MACAmB,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.2e29a66b.chunk.js","sourcesContent":["import React from 'react'\nimport './Footer.css'\nfunction Footer(){\n  return (\n    <footer className='footer'>\n      <p>Copyright Â© 2020</p>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport DataArray from '../DataArray'\nimport axios from 'axios'\n/*function Item(props){\n  console.log(props)\n  return (\n  <div className='item'>\n    <span>{props.name}</span>\n    <button className='delete'><i className='material-icons'>delete</i></button>\n    <button className='check'><i className='material-icons'>check</i></button>\n  </div>\n)}*/\nfunction removeFromDataArray(nr){\n  console.log(nr-1)\n  DataArray.splice(nr-1,1)\n}\n\nclass Item extends React.Component{\n  constructor(){\n    super()\n    this.handleDelete=this.handleDelete.bind(this)\n    this.crossOut=this.crossOut.bind(this)\n    this.state={visible:1,crossOut:0}\n  }\n  handleDelete(event){\n    event.preventDefault()\n    axios.delete('https://jsonbox.io/box_88b4c49258cb119ab444/'+this.props.item._id)\n    this.setState({visible:0})\n    this.props.fun()\n  }\n  crossOut(event){\n    event.preventDefault()\n    console.log(\"elo\")\n    this.setState({crossOut:1})\n  }\n  render(){\n    return (\n      this.state.visible===-1?null:\n      (<div className={`item ${this.state.visible==0?\"fadeOut\":\"\"}`}>\n        <span className={`abc ${this.state.crossOut===1?\"crossOut\":\"\"}`}>{this.props.item.el.name}</span>\n        <button onClick={this.handleDelete} className='delete'><i className='material-icons'>delete</i></button>\n        <button onClick={this.crossOut} className='check'><i className='material-icons'>check</i></button>\n        </div>)\n      )}\n}\n\n\nexport default Item\n","import React from 'react'\nimport './Main.css'\nimport Item from './Item/Item'\nimport DataArray from './DataArray'\nimport axios from 'axios'\n\n\nclass Main extends React.Component{\n    constructor(){\n      super()\n      this.state={\n        array:[],\n        activity:\"\",\n      }\n      this.handleChange=this.handleChange.bind(this)\n      this.handleSubmit=this.handleSubmit.bind(this)\n      this.update=this.update.bind(this)\n    }\n    addToDataArray(el){\n      axios.post('https://jsonbox.io/box_88b4c49258cb119ab444', {el})\n    }\n    update(){\n      axios.get('https://jsonbox.io/box_88b4c49258cb119ab444')\n        .then(res=>{\n        const activities=res.data\n        if(JSON.stringify(this.state.array)==JSON.stringify(activities))this.update()\n        else this.setState({array:activities,activity:\"\"})\n      })\n    }\n    componentDidMount(){\n      axios.get('https://jsonbox.io/box_88b4c49258cb119ab444')\n        .then(res=>{\n          const activities=res.data\n          this.setState({array:activities})\n        })\n    }\n    handleChange(event){\n      this.setState({activity:event.target.value})\n    }\n    handleSubmit(event){\n      event.preventDefault()\n      this.addToDataArray(\n        {\n            name:this.state.activity,\n            done:false,\n            key:this.state.array.length+1,\n        }\n      )\n      //while(this.state.readyToRender===0){console.log(this.state.readyToRender)}\n      //this.setState({readyToRender:0})\n\n      this.update()\n      this.render()\n    }\n    mapping(x){\n      return <Item key={x._id} item={x} fun={this.update} />;\n    }\n    render(){\n      let cmps=this.state.array.map(x=>this.mapping(x));\n      return(\n        <div>\n          <div className='search_div'>\n            <form onSubmit={this.handleSubmit}>\n              <input value={this.state.activity} className='search' type='text' onChange={this.handleChange} placeholder='What do you have to do?' autoFocus></input>\n                <input type='submit' value='submit' className='submit'></input>\n            </form>\n          </div>\n        {cmps}\n      </div>\n        )\n    }\n}\n\nexport default Main\n","import React from 'react'\nimport './Header.css'\nfunction Header(){\n  return(\n    <header>\n      <span>Home</span>\n      <span className='right'>Login</span>\n      <span className='right'>Register</span>\n    </header>\n  )\n}\nexport default Header;\n","import React from 'react'\n\nclass Slider extends React.Component{\n  render(){\n    return(\n      <div>\n        <div className='slider'>\n          <div className='slider-container'>\n            <div className='hide'><span>ToDo list app</span></div>\n            <div className='hide'><span>Created by</span></div>\n            <div className='hide'><span>Jan  Wojtach</span></div>\n          </div>\n        </div>\n        <div className='slider-2'></div>\n      </div>\n    )\n  }\n}\nexport default Slider;\n","import React from 'react';\nimport Footer from './Footer/Footer'\nimport Main from './Main/Main'\nimport Header from './Header/Header'\nimport Slider from './Slider'\nfunction MyApp(){\n  return   (\n    <div>\n      <Header />\n      <Main />\n      <Footer />\n      <Slider />\n    </div>\n  )\n}\nexport default MyApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDom from 'react-dom'\nimport MyApp from './MyApp'\nimport * as serviceWorker from './serviceWorker'\nReactDom.render(\n  <MyApp />,\n  document.getElementById('root')\n)\nserviceWorker.unregister();\n"],"sourceRoot":""}